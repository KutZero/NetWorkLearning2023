////////////////////////////////////////////////////////////////////
Команды git

git init - создать репозиторий в папке
git config "FLAG" "PARAMETER" "VALUE" 
	"PARAMETER" - настраиваемый параметр (user.name; 
					      user.email;
					      core.editor - текстовый редактор для git команд;
					      alias."ALIAS" установить псевдоним для 1 или нескольких команд
						("ALIAS" - пвевдоним команды))
	"VALUE" - значение параметра ('Ivan' (пример для user.name); 
				      'ivan@gmail.com' (пример для user.email);
				      'C:/Programs/Text/text.exe'(пример для core.editor);
				      'congig --global'(гит команды) или '! echo "hello"; echo "from git"' (системные команды) 
				      		или '! git config...; git config...' (гит команды)(пример для alias."ALIAS"))
	"FLAG" - флаг. Определяет уровень настроек. (--local - настройки сохранятся в папке репозитория (по умолчанию);
						     --global - настройки сохранятся в папке пользователя Windows;
						     --system - настройки сохранятся в системной папке для всех пользователей;
						     --list - вывести список настроек конфигурации)
                                                                             
git "FUNC" -h - посмотреть описание функции и её параметры (краткая инфа)
	"FUNC" - любая команда гит

git help "FUNC" - посмотреть описание функции и её параметры (полная инфа)
	"FUNC" - любая команда гит

git status - вывести список файлов репозитория и их статус git
	красное название файла - файл не отслеживается git
	зеленое название файла - файл проиндексирован 

git add "FLAG" "FILE_NAME" - добавить файл в индекс
	"FILE_NAME" - название файла
	"FLAG" - флаг (-p - можно построчно выбрать какие изменения вносить в индекс;
		       -A - добавить в индекс ВСЕ изменения и новые файлы;
		       -f - добавить в индекс файл, помеченный gitignor-ом)

git commit "FILE_NAME" "FLAG" "PATH"- закомимитить изменение (откроет окно текстового редактора core.editor)
	"FILE_NAME" - название файла
	"FLAG" - флаг (--author - указать автора кода (пример: -author='Name <Email>');
		       --date - указать дату (пример: --date='...');
		       --all(он же -a) - закоммитить все изменения (без add);
		       -m - написать краткое сообщение (пример: git commit -m "Message")
	"PATH" - путь к файлу или файлам для коммита
	пример оформления текста commit - (Заголовок (до 50 символов)
	                                   (пустая строка)
					   * Сделал а
					   * Сделал б
				    	   (подробное описание))

git show "COMMIT_HEX_CODE" "FLAG" - вывести информацию о коммите (если не указать значений - выведет инфу о последнем коммите)
	"COMMIT_HEX_CODE" - номер коммита 
	"FLAG" - флаги (--pretty=fuller - вывести полную информацию)

git rm "FLAG" "PATH" - удалить файл или папку и записать в индекс
	"FLAG" - флаг (-r - если удаляем папку;
		       --cached - удалить файл из индекса, но оставить в локальной папке 
		       (смысл - операция производится с индексом);
		       -f - игнорировать предупреждения)	
	"PATH" - путь к файлу или папке

git mv "OLD_FILE_NAME" "NEW_FILE_NAME" - переименовать файл и записать в индекс
	"OLD_FILE_NAME" - старое имя файла с расширением
	"NEW_FILE_NAME" - новое имя файла с расширением

git branch "FLAG" "BRANCH_NAME" "COMMIT_NAME" - показать список веток репозитория
	"FLAG" - флаг (-v - выведет еще и инфу о ласт коммите для каждой ветки;
			-f (--force)) - заставить создать ветку 
	"BRANCH_NAME" - название ветки (если указано и такой ветки нет в репозитории - то, она создастся от текущего места HEAD)
	"COMMIT_NAME" - (можно указать и имя ветки) номер коммита, если указан, то созданная ветка будет указывать на данный коммит. 
		Так можно переносить ветки, например имея последний коммит, на который указывает 2 ветки, 1 из них можно перенести 
		на несколько коммитов назад так: "git branch -f master 54a4" или "git branch -f master fix"

git checkout "FLAG" "BRANCH_NAME" "PATH" - перейти на указанную ветку
	"FLAG" - флаг (-b - создать ветку и переключиться на неё 
			(если изменения не закоммичены на изначальной ветке, можно перенести их на дочернюю);
			--force(он же -f) - заставить перейти на другую ветку даже с незакоммиченными изменениями;
			-B - создать ветку, если она есть то перенести её на текущий или указанный коммит и перейти на неё
				(пример: "git checkout -B master 54a4" или "git checkout -B master fix"))	
	"BRANCH_NAME" - название ветки (можно указать номер коммита)
	(Пример: УДАЛЕНИЕ незакоммиченных изменений в текущей ветке -  git checkout -f HEAD 
		(можно не добавлять HEAD, тк он юзается по умолчанию))
	"PATH" - путь к файлу. Если мы хотим восстановить состояние только конкретного файла на
		момент определенного коммита, пример: "git checkout 54as index.html"
		(лучше перед путем писать --, чтобы случайно не перейти на одноименную ветку
		пример: "git checkout --master" - вернет состояние папки master)

git shash - собирает незакоммиченные изменения, удаляет их из файлов и архивирует в специальном виде
	("ВАЖНО" - архив не ассоциируется к конкретной ветке, так что можно применить их к любой. Пользоваться осторожно)

git stash pop - возвращает заархивированные ранее незакоммиченные изменения

git cherry-pick "COMMIT_NAME" - скопировать коммит на текущую ветку
	"COMMIT_NAME" - (можно указать и имя ветки) номер коммита

git reset "PATH"
        "PATH" - путь к файлу, которы необходимо удалить из индекса
		

////////////////////////////////////////////////////////////////////
Если Git выводит что то постранично, то делает это с помощью "less".
Команды "less"

/"STRING" - поиск строк по слову (нажать "n" - поиск вперед; 
				  нажать "shift + n" - поиск назад;
				  нажать "q" - выход из листалки)
	"STRING" - строка


////////////////////////////////////////////////////////////////////
Общие команды

ls - вывести список файлов в папке	

cat "PATH" - открыть файл к просмотру
	"PATH" - путь к файлу   (пример относительного пути - "~/FILE_NAME")

