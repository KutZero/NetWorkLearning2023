images ///////////////////////////////////////////
docker images - показать список образов
docker image ls - показать список образов
docker pull <имя образа>:<версия> - скачать образ из DockerHub
docker rmi <id образа или его имя> - удалить образ
docker build <путь к папке, на основании которой надо сделать образ> - создать
	свой образ из папки (если написать "." - создаст образ из текущей папки)
	-t <имя> - задать имя образа
	-t <id пользователя docker hub>/<имя> - задать имя образа для отправки
		в docker hub

containers ///////////////////////////////////////
docker ps - посмотреть список запущенных контейнеров
	-a - показать историю
	-q - вывести только id контейнеров
docker rm <id контейнера или его имя> - удалить контейнер
	Пример: docker rm $(docker ps -qa) - удалить все контейнеры
docker run <id образа или его имя>:<версия>
	- запустить новый контейнер на основании образа
	-d - запуск в фоновом режиме
	--name <имя контейнера> - задать имя контейнеру
	--rm - удалить контейнер после завершения его работы
	-p <порт пк>:<порт контейнера> - привязать порт контейнера
		к порту пк для связи контейнера с внешним миром
	-e <имя переменной окружения> <значение переменной окружения> - задать
		переменную окружения
	-v <путь на пк>:<путь в контейнере> - связать директурию пк с директорией в 
		контейнере (контейнер может менять её содержимое и в пк это можно увидеть
		и наоборот)
	-v <имя volume>:<путь в контейнере> - связать volume на пк с директорией в 
		контейнере
	-it - запустить в интерактивном режиме (-t и -i -отдельные команды)
	--net <имя сети или id> - запустить контейнер в определенной docker сети
	--ip <ip> - назначить контейнеру ip адрес
docker stop <id контейнера или его имя> - остановить контейнер стандартно
docker start <id контейнера или его имя> - запустить существующий контейнер
docker pause <id контейнера или его имя> - приостановить работу контейнера
docker unpause <id контейнера или его имя> - возобновить работу приостановленного 
	контейнера
docker kill <id контейнера или его имя> - остановить контейнер принудительно
docker inspect <имя контейнера или id> - получить подробную информацию о контейнере
docker inspect --format='{{.NetworkSettings.IPAddress}}' <имя контейнера или id> - 
	получить ip адрес контейнера

docker hub ///////////////////////////////////////
docker login - начать процедуру входа в аккаунт docker hub
docker push <имя образа> - загрузить локальный образ в docker hub  
	(только после docker login)

volumes //////////////////////////////////////////
docker volume ls - отобразить список volumes
docker volume create <name> - создать volume (по сути особую папку)
docker volume rm <имя volume> - удалить volume
docker volume ls - вывести список volumes

network //////////////////////////////////////////
docker network create <имя сети> - создать свою сеть в docker
	--driver (он же -d) <driver сети> - указать тип создаваемой сети
	--subnet <ip>/<mask> - настройка сети
	--gateway <ip> - настроить сетевой шлюз
docker network ls - вывести список всех сетей внутри docker
docker network inspect <имя сети или id> - вывести информацию о сети
docker network rm <имя сети или id> - удалить сеть
docker network connect <имя сети или id> <id контейнера или его имя> - 
	подключить существующий контейнер к другой docker сети
docker network disconnect <имя сети или id> <id контейнера или его имя> - 
	отключить существующий контейнер от docker сети
